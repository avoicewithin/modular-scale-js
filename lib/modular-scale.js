// Generated by CoffeeScript 1.6.2
(function() {
  var ModularScale;

  ModularScale = (function() {
    var baseOptions;

    baseOptions = {
      ratio: 'golden',
      baseSize: 16,
      importantNumber: 100,
      roundToDecimalPlaces: 2,
      debug: false
    };

    function ModularScale(options) {
      this.options = options != null ? options : baseOptions;
      this.scale = [];
      this.ratios = {
        double_octave: 4 / 1,
        major_twelfth: 3 / 1,
        major_eleventh: 8 / 3,
        major_tenth: 5 / 2,
        octave: 2 / 1,
        major_seventh: 15 / 8,
        minor_seventh: 16 / 9,
        major_sixth: 5 / 3,
        minor_sixth: 8 / 5,
        fifth: 3 / 2,
        augmented_fourth: Math.sqrt(2) / 1,
        fourth: 4 / 3,
        major_third: 5 / 4,
        minor_third: 6 / 5,
        major_second: 9 / 8,
        minor_second: 16 / 15,
        golden: 1 / 2 + (Math.sqrt(5) / 2)
      };
      if (this.options.baseSize == null) {
        this.options.baseSize = baseOptions.baseSize;
      }
      if (this.options.importantNumber == null) {
        this.options.importantNumber = baseOptions.ratio;
      }
      if (this.options.debug == null) {
        this.options.debug = baseOptions.debug;
      }
      if (this.options.roundToDecimalPlaces == null) {
        this.options.roundToDecimalPlaces = baseOptions.roundToDecimalPlaces;
      }
      this.options.ratio = this.options.ratio != null ? this.ratios[this.options.ratio] : this.ratios[baseOptions.ratio];
      this._createScale();
    }

    ModularScale.prototype.ms = function(multiple) {
      var indexOfBase;

      indexOfBase = this.scale.indexOf(this.options.baseSize);
      return this._roundToDecimalPlaces(this.scale[indexOfBase + multiple], this.options.roundToDecimalPlaces);
    };

    ModularScale.prototype.set = function(prop, value) {
      this.options[prop] = value;
      this._createScale();
      return this.options[prop];
    };

    ModularScale.prototype.get = function(prop) {
      return this.options[prop];
    };

    ModularScale.prototype._createScale = function() {
      this.scale = [];
      this.scale = this.scale.concat(this._createFontValuesFrom(this.options.baseSize), this._createFontValuesFrom(this.options.importantNumber)).sort(function(a, b) {
        return a - b;
      });
      if (this.options.debug) {
        this._debug();
      }
      return this.scale;
    };

    ModularScale.prototype._createFontValuesFrom = function(sizeValue) {
      var i, _i, _results;

      _results = [];
      for (i = _i = -15; _i <= 15; i = ++_i) {
        _results.push(this._createFontValue(sizeValue, i));
      }
      return _results;
    };

    ModularScale.prototype._createFontValue = function(sizeValue, i) {
      var value;

      value = Math.pow(this.options.ratio, i) * sizeValue;
      return this._roundToDecimalPlaces(value, 4);
    };

    ModularScale.prototype._roundToDecimalPlaces = function(number, decimalPlaces) {
      if (decimalPlaces < 0) {
        decimalPlaces = 0;
      }
      if (decimalPlaces > 1) {
        return Math.round(number * (10 * decimalPlaces)) / (10 * decimalPlaces);
      } else {
        return Math.round(number);
      }
    };

    ModularScale.prototype._debug = function() {
      console.log("------------------------------");
      console.log("font size: " + this.options.baseSize);
      console.log("important number: " + this.options.importantNumber);
      console.log("ratio: " + this.options.ratio);
      console.log(this.scale);
      return console.log(this._makeMsUrl(this.options.baseSize, this.options.importantNumber, this.options.ratio));
    };

    ModularScale.prototype._makeMsUrl = function(px1, px2, ra1) {
      return "http://modularscale.com/scale/?px1=" + px1 + "&px2=" + px2 + "&ra1=" + ra1;
    };

    return ModularScale;

  })();

  if ((typeof module !== "undefined" && module !== null) && (typeof require !== "undefined" && require !== null)) {
    module.exports = ModularScale;
  } else {
    this.ModularScale = ModularScale;
  }

}).call(this);
